// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vilderxyz/todos/db (interfaces: Model)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	db "github.com/vilderxyz/todos/db"
	reflect "reflect"
	time "time"
)

// MockModel is a mock of Model interface
type MockModel struct {
	ctrl     *gomock.Controller
	recorder *MockModelMockRecorder
}

// MockModelMockRecorder is the mock recorder for MockModel
type MockModelMockRecorder struct {
	mock *MockModel
}

// NewMockModel creates a new mock instance
func NewMockModel(ctrl *gomock.Controller) *MockModel {
	mock := &MockModel{ctrl: ctrl}
	mock.recorder = &MockModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModel) EXPECT() *MockModelMockRecorder {
	return m.recorder
}

// CreateOneTodo mocks base method
func (m *MockModel) CreateOneTodo(arg0 db.CreateTodoParams) (db.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOneTodo", arg0)
	ret0, _ := ret[0].(db.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOneTodo indicates an expected call of CreateOneTodo
func (mr *MockModelMockRecorder) CreateOneTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOneTodo", reflect.TypeOf((*MockModel)(nil).CreateOneTodo), arg0)
}

// DeleteOneTodo mocks base method
func (m *MockModel) DeleteOneTodo(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneTodo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneTodo indicates an expected call of DeleteOneTodo
func (mr *MockModelMockRecorder) DeleteOneTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneTodo", reflect.TypeOf((*MockModel)(nil).DeleteOneTodo), arg0)
}

// GetAllTodos mocks base method
func (m *MockModel) GetAllTodos() ([]db.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTodos")
	ret0, _ := ret[0].([]db.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTodos indicates an expected call of GetAllTodos
func (mr *MockModelMockRecorder) GetAllTodos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTodos", reflect.TypeOf((*MockModel)(nil).GetAllTodos))
}

// GetManyTodos mocks base method
func (m *MockModel) GetManyTodos(arg0, arg1 time.Time) ([]db.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyTodos", arg0, arg1)
	ret0, _ := ret[0].([]db.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyTodos indicates an expected call of GetManyTodos
func (mr *MockModelMockRecorder) GetManyTodos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyTodos", reflect.TypeOf((*MockModel)(nil).GetManyTodos), arg0, arg1)
}

// GetOneTodoById mocks base method
func (m *MockModel) GetOneTodoById(arg0 int64) (db.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneTodoById", arg0)
	ret0, _ := ret[0].(db.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneTodoById indicates an expected call of GetOneTodoById
func (mr *MockModelMockRecorder) GetOneTodoById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneTodoById", reflect.TypeOf((*MockModel)(nil).GetOneTodoById), arg0)
}

// UpdateOneTodo mocks base method
func (m *MockModel) UpdateOneTodo(arg0 db.Todo) (db.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneTodo", arg0)
	ret0, _ := ret[0].(db.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOneTodo indicates an expected call of UpdateOneTodo
func (mr *MockModelMockRecorder) UpdateOneTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneTodo", reflect.TypeOf((*MockModel)(nil).UpdateOneTodo), arg0)
}
